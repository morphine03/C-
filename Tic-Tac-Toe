#include <iostream>
#include <stdlib.h>

using namespace std;

int choice;
int row,column;
char turn = 'X';
bool draw = false;
char board[3][3] = {{'1','2','3'},{'4','5','6'},{'7','8','9'}};  //Array for the board

void display_board()    //Function to show the current status of the gaming board
{
    cout<<endl<<"  CURRENT BOARD STATE: "<<endl;
    cout<<endl<<"\t     |     |     "<<endl;
    cout<<"\t  "<<board[0][0]<<"  |  "<<board[0][1]<<"  |  "<<board[0][2]<<endl;
    cout<<"\t_____|_____|_____"<<endl;
    cout<<"\t     |     |     "<<endl;
    cout<<"\t  "<<board[1][0]<<"  |  "<<board[1][1]<<"  |  "<<board[1][2]<<endl;
    cout<<"\t_____|_____|_____"<<endl;
    cout<<"\t     |     |     "<<endl;
    cout<<"\t  "<<board[2][0]<<"  |  "<<board[2][1]<<"  |  "<<board[2][2]<<endl;
    cout<<"\t     |     |     "<<endl;
}

void player_turn()  //Function to get the player input and update the board
{
    if(turn == 'X')
    {
        cout<<endl<<"  Player X, enter number between 1 and 9: ";
    }
    else if(turn == 'O')
    {
        cout<<endl<<"  Player O, enter number between 1 and 9: ";
    }
    cin>> choice;   //Taking input from user, updating the board according to choice and reassigning the turn Start
    switch(choice)  //switch case to get which row and column will be update
    {
        case 1: row=0; column=0; break;
        case 2: row=0; column=1; break;
        case 3: row=0; column=2; break;
        case 4: row=1; column=0; break;
        case 5: row=1; column=1; break;
        case 6: row=1; column=2; break;
        case 7: row=2; column=0; break;
        case 8: row=2; column=1; break;
        case 9: row=2; column=2; break;
        default:
        cout<<"Not a valid choice, Try again."<<endl;
    }

    if(turn == 'X' && board[row][column] != 'X' && board[row][column] != 'O') //updating the position for 'X' symbol  it is not already occupied
    {
        board[row][column] = 'X';
        turn = 'O';
    }
    else if(turn == 'O' && board[row][column] != 'X' && board[row][column] != 'O') //updating the position for 'O' symbol  it is not already occupied
    {
        board[row][column] = 'O';
        turn = 'X';
    }
    else //if input position already filled
    {
        cout<<"Box already filled! Please choose another!!"<<endl;
        player_turn();
    }
    display_board();
}

bool gameover() //Function to get the game status e.g. GAME WON, GAME DRAW GAME IN CONTINUE MODE
{
    for(int i=0; i<3; i++)  //checking the win for Simple Rows and Simple Column
    if(((board[i][0] == board[i][1]) && (board[i][0] == board[i][2])) || ((board[0][i] == board[1][i]) && (board[0][i] == board[2][i])))
    return false;

    if(((board[0][0] == board[1][1]) && (board[0][0] == board[2][2])) || ((board[0][2] == board[1][1]) && (board[0][2] == board[2][0])))    //checking the win for both diagonal
    return false;

    for(int i=0; i<3; i++)  //Checking the game is in continue mode or not
    for(int j=0; j<3; j++)
    if(board[i][j] != 'X' && board[i][j] != 'O')
    return true;

    draw = true;    //Checking the if game already draw
    return false;
}

int main()  //Program Main Method
{
    cout<<"\t TICK -- TAC -- TOE"<<endl;
    display_board();

    while(gameover())
    {
        player_turn();
        gameover();
    }
    if(turn == 'X' && draw == false)
    {
        cout<<"Congratulations! Player 'O' has won the game"<<endl;
    }
    else if(turn == 'O' && draw == false){
        cout<<"Congratulations! Player 'X' has won the game"<<endl;
    }
    else
    cout<<"GAME DRAW!!";
    return 0;
}
